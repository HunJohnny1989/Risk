/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;
import java.awt.*;
import java.awt.event.*;
import java.awt.geom.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;
import model.dto.GameField;
import model.dto.Territory;
/**
 *
 * @author Eszti
 */
public class Surface extends javax.swing.JPanel implements MouseListener {

    /**
     * Creates new form Surface
     */
    private GameField field;
    private Territory selectedTerritory;
    private java.util.List<Territory> subSelectedTerritories;
    private final AffineTransform transform = new AffineTransform();
    private InternalMapAction internalMapAction; 
    private PlaceTroops placeTroopsDialog;

    public Surface() {
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        double width = 1+(screenSize.getWidth()/8000);
        double height = 1+(screenSize.getHeight()/9000);
        transform.scale(width, height);
        //transform.scale(1.75, 1.75);
        transform.translate(60, 0);
        initComponents();
        field = new GameField("src\\Model\\MapShape.xml");
        internalMapAction = InternalMapAction.SELECTNEIGHBOUR;
        addMouseListener(this);
        placeTroopsDialog = new PlaceTroops((JFrame)SwingUtilities.windowForComponent(this), true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(153, 204, 255));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    private void doDrawing(Graphics g) {
        
        Graphics2D g2d = (Graphics2D) g.create();

        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                             RenderingHints.VALUE_ANTIALIAS_ON);

        g2d.setRenderingHint(RenderingHints.KEY_RENDERING,
                             RenderingHints.VALUE_RENDER_QUALITY);

        g2d.transform(transform);
        for(Territory path : field.getTerritories())
        {
            g2d.setPaint(Color.MAGENTA);
            g2d.fill(path.getShape());
            g2d.setPaint(Color.BLACK);
            if (path.getCenterPoint()!=null){
                g2d.drawString(Integer.toString(path.getTroopCount()), path.getCenterPoint().x, path.getCenterPoint().y);
            }
        }
        if (selectedTerritory != null){
            g2d.setPaint(Color.BLACK);
            g2d.draw(selectedTerritory.getShape());
        }
        if (subSelectedTerritories != null){
            g2d.setPaint(Color.RED);
            for(Territory territory:subSelectedTerritories)
            {
                g2d.draw(territory.getShape());
            }
        }
        g2d.dispose();
    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        
        doDrawing(g);
    }    

    @Override
    public void mouseClicked(MouseEvent me) {
    }

    @Override
    public void mousePressed(MouseEvent me) {
        if (me.getClickCount() > 1)
        {
            if (internalMapAction == InternalMapAction.PLACETROOPS)
            {
                internalMapAction = InternalMapAction.SELECTNEIGHBOUR;
            }
            else if (internalMapAction == InternalMapAction.SELECTNEIGHBOUR)
            {
                this.selectedTerritory = null;
                this.subSelectedTerritories = null;
                this.repaint();
                internalMapAction = InternalMapAction.PLACETROOPS;
            }
            return;
        }
        if (internalMapAction == InternalMapAction.NONE)
        {
            return;
        }
        
        selectedTerritory = null;
        Point2D transformedPoint = new Point2D.Double();
        try {
            transformedPoint = transform.inverseTransform(me.getPoint(), transformedPoint);
        } catch (NoninvertibleTransformException ex) {
            Logger.getLogger(Surface.class.getName()).log(Level.SEVERE, null, ex);
        }

        for(Territory path : field.getTerritories())
        {
            if (path.getShape().contains(transformedPoint))
            {
                switch(internalMapAction)
                {
                    case NONE:
                        return;
                    case PLACETROOPS:
                        selectedTerritory = path;
                        repaint();
                        placeTroopsDialog.setLocation(me.getPoint().x + 5, me.getPoint().y);
                        placeTroopsDialog.setVisible(true);
                        path.addTroops(placeTroopsDialog.getNumberOfPlacedTroops());
                        break;
                    case SELECTNEIGHBOUR:
                        selectedTerritory = path;
                        subSelectedTerritories = path.getNeighbourTerritories();
                    break;
                }
                this.repaint();
                return;
            }
        }
    }

    @Override
    public void mouseReleased(MouseEvent me) {
    }

    @Override
    public void mouseEntered(MouseEvent me) {
    }

    @Override
    public void mouseExited(MouseEvent me) {
    }

    public GameField getField() {
        return field;
    }
 }
enum InternalMapAction
{
    NONE, SELECTNEIGHBOUR, PLACETROOPS 
}
